command_builder.c
// Cria um novo nó de comando
t_commands	*create_command_node(t_garbage **gc)
{
	t_commands	*cmd;

	cmd = gc_malloc(sizeof(t_commands), gc);
	if (!cmd)
		return (NULL);
	cmd->argv = NULL;
	cmd->redir = NULL;
	cmd->next = NULL;
	return (cmd);
}

// Cria um novo nó de redirecionamento
t_redir	*create_redir_node(t_redir_type type, char *file, t_garbage **gc)
{
	t_redir	*redir;

	redir = gc_malloc(sizeof(t_redir), gc);
	if (!redir)
		return (NULL);
	redir->type = type;
	redir->file = file;
	redir->next = NULL;
	return (redir);
}

// Adiciona um redirecionamento ao comando
void	add_redir_to_command(t_commands *cmd, t_redir *new_redir)
{
	t_redir	*last;

	if (!cmd || !new_redir)
		return ;
	if (!cmd->redir)
	{
		cmd->redir = new_redir;
		return ;
	}
	last = cmd->redir;
	while (last->next)
		last = last->next;
	last->next = new_redir;
}

// Adiciona um argumento ao vetor argv do comando
int	add_arg_to_command(t_commands *cmd, char *arg, t_garbage **gc)
{
	char	**new_argv;
	int		count;
	int		i;

	if (!cmd || !arg)
		return (1);
	count = 0;
	while (cmd->argv && cmd->argv[count])
		count++;
	new_argv = gc_malloc(sizeof(char *) * (count + 2), gc);
	if (!new_argv)
		return (1);
	i = 0;
	while (i < count)
	{
		new_argv[i] = cmd->argv[i];
		i++;
	}
	new_argv[i] = arg;
	new_argv[i + 1] = NULL;
	cmd->argv = new_argv;
	return (0);
}

// Adiciona um comando ao final da lista de comandos
void	add_command_to_list(t_commands **list, t_commands *new_cmd)
{
	t_commands	*last;

	if (!list || !new_cmd)
		return ;
	if (!*list)
	{
		*list = new_cmd;
		return ;
	}
	last = *list;
	while (last->next)
		last = last->next;
	last->next = new_cmd;
}
parser_utils.c
char	*extract_quoted_token(char *input, int *i, t_minishell *mini)
{
	int		start;
	int		len;
	char	quote_type;
	char	*token;

	quote_type = input[*i];
	(*i)++;
	start = *i;
	while (input[*i] && input[*i] != quote_type)
		(*i)++;
	if (input[*i] != quote_type)
	{
		write(2, "minishell: syntax error: unclosed quotes\n", 42);
		return (NULL);
	}
	len = *i - start;
	token = gc_malloc(len + 1, &mini->gc);
	if (!token)
		return (NULL);
	ft_strlcpy(token, &input[start], len + 1);
	if (input[*i] == quote_type)
		(*i)++;
	return (token);
}

parser.c
#include "minishell.h"
// Cria um novo token
static t_token	*create_token(char *value, t_tokens type, t_garbage **gc)
{
	t_token	*token;

	token = gc_malloc(sizeof(t_token), gc);
	if (!token)
		return (NULL);
	token->value = value;
	token->type = type;
	token->next = NULL;
	return (token);
}

// Adiciona token à lista
static void	add_token_to_list(t_token **list, t_token *new_token)
{
	t_token	*last;

	if (!list || !new_token)
		return ;
	if (!*list)
	{
		*list = new_token;
		return ;
	}
	last = *list;
	while (last->next)
		last = last->next;
	last->next = new_token;
}

// Determina o tipo do operador
static t_tokens	get_operator_type(char *input, int pos)
{
	if (input[pos] == '|')
		return (T_PIPE);
	else if (input[pos] == '<')
	{
		if (input[pos + 1] == '<')
			return (T_REDIR_HEREDOC);
		return (T_REDIR_IN);
	}
	else if (input[pos] == '>')
	{
		if (input[pos + 1] == '>')
			return (T_REDIR_APPEND);
		return (T_REDIR_OUT);
	}
	return (T_WORD);
}

static void	process_operator_token(char *input, int *i, t_token **tokens, t_garbage **gc)
{
	t_tokens	type;
	t_token		*new_token;

	type = get_operator_type(input, *i);
	if ((input[*i] == '>' || input[*i] == '<') && input[*i + 1] == input[*i])
	{
		new_token = create_token(NULL, type, gc);
		printf("Token: %c%c\n", input[*i], input[*i + 1]);  // Mantém o debug
		*i += 2;
	}
	else
	{
		new_token = create_token(NULL, type, gc);
		printf("Token: %c\n", input[*i]);  // Mantém o debug
		(*i)++;
	}
	if (new_token)
		add_token_to_list(tokens, new_token);
}

static void	process_quoted_token(char *input, int *i, t_minishell *mini, t_token **tokens)
{
	char	*value;
	t_token	*new_token;

	if (input[*i] == '\'')
		value = handle_single_quotes(input, i, mini);
	else if (input[*i] == '"')
		value = handle_double_quotes(input, i, mini);
	else
		value = NULL;
	if (!value)
		return ;
	printf("Token: %s\n", value);  // Mantém o debug
	new_token = create_token(value, T_WORD, &mini->gc);
	if (new_token)
		add_token_to_list(tokens, new_token);
}

static void	process_word_token(char *input, int *i, int len, t_minishell *mini, t_token **tokens)
{
	int		start;
	int		tok_len;
	char	*value;
	char	*expanded;
	t_token	*new_token;

	start = *i;
	while (*i < len && !is_space(input[*i]) && !is_operator(input[*i])
		&& input[*i] != '\'' && input[*i] != '"')
		(*i)++;
	tok_len = *i - start;
	value = gc_malloc(tok_len + 1, &mini->gc);
	if (!value)
		return ;
	ft_strlcpy(value, &input[start], tok_len + 1);
	expanded = expand_variables(value, mini);
	if (expanded)
	{
		printf("Token: %s\n", expanded);  // Mantém o debug
		new_token = create_token(expanded, T_WORD, &mini->gc);
	}
	else
	{
		printf("Token: %s\n", value);  // Mantém o debug
		new_token = create_token(value, T_WORD, &mini->gc);
	}
	if (new_token)
		add_token_to_list(tokens, new_token);
}

t_token	*tokenize(char *input, t_minishell *mini)
{
	t_token	*tokens;
	int		i;
	int		len;

	if (!input)
		return (NULL);
	// Se mini não foi passado, cria um temporário
	t_minishell temp_mini = {0};
	if (!mini)
	{
		mini = &temp_mini;
		init_env_list(mini, __environ);
	}
	tokens = NULL;
	i = 0;
	len = ft_strlen(input);
	printf("Tokens encontrados:\n");

	while (i < len)
	{
		if (is_space(input[i]))
			i++;
		else if (is_operator(input[i]))
			process_operator_token(input, &i, &tokens, &mini->gc);
		else if (input[i] == '\'' || input[i] == '"')
			process_quoted_token(input, &i, mini, &tokens);
		else
			process_word_token(input, &i, len, mini, &tokens);
	}

	// Se usamos mini temporário, limpa
	if (mini == &temp_mini)
		gc_free_all(&mini->gc);

	return (tokens);
}

// Função de compatibilidade - mantém a interface antiga para debug
void	tokenize_debug(char *input)
{
	t_minishell	mini = {0};
	t_token		*tokens;

	init_env_list(&mini, __environ);
	tokens = tokenize(input, &mini);

	gc_free_all(&mini.gc);
}

quote_handlers.c
char	*handle_single_quotes(char *input, int *i, t_minishell *mini)
{
	int		start;
	int		len;
	char	*token;

	(*i)++;
	start = *i;
	while (input[*i] && input[*i] != '\'')
		(*i)++;
	if (input[*i] != '\'')
	{
		write(2, "minishell: syntax error: unclosed quotes\n", 42);
		return (NULL);
	}
	len = *i - start;
	token = gc_malloc(len + 1, &mini->gc);
	if (!token)
		return (NULL);
	ft_strlcpy(token, &input[start], len + 1);
	(*i)++;
	return (token);
}

static int	find_closing_double_quote(char *input, int *i)
{
	int	start;

	start = *i;
	while (input[*i] && input[*i] != '"')
	{
		if (input[*i] == '\\' && input[*i + 1] == '"')
			*i += 2;
		else
			(*i)++;
	}
	if (input[*i] != '"')
	{
		write(2, "minishell: syntax error: unclosed quotes\n", 42);
		return (-1);
	}
	return (*i - start);
}

char	*handle_double_quotes(char *input, int *i, t_minishell *mini)
{
	int		start;
	int		len;
	char	*raw_token;
	char	*expanded_token;

	(*i)++;
	start = *i;
	len = find_closing_double_quote(input, i);
	if (len == -1)
		return (NULL);
	raw_token = extract_raw_content(input, start, len, &mini->gc);
	if (!raw_token)
		return (NULL);
	expanded_token = expand_variables(raw_token, mini);
	(*i)++;
	return (expanded_token);
}

string_utils.c
char	*join_strings(char *s1, char *s2, t_garbage **gc)
{
	char	*result;
	int		len1;
	int		len2;

	if (!s1 || !s2)
		return (s1);
	len1 = ft_strlen(s1);
	len2 = ft_strlen(s2);
	result = gc_malloc(len1 + len2 + 1, gc);
	if (!result)
		return (s1);
	ft_strlcpy(result, s1, len1 + 1);
	ft_strlcat(result, s2, len1 + len2 + 1);
	return (result);
}

char	*append_char(char *str, char c, t_garbage **gc)
{
	char	*result;
	int		len;

	if (!str)
		return (NULL);
	len = ft_strlen(str);
	result = gc_malloc(len + 2, gc);
	if (!result)
		return (str);
	ft_strlcpy(result, str, len + 1);
	result[len] = c;
	result[len + 1] = '\0';
	return (result);
}

token_parser.c

// Determina o tipo de redirecionamento baseado no token
static t_redir_type	get_redir_type(t_tokens token_type)
{
	if (token_type == T_REDIR_IN)
		return (REDIR_IN);
	else if (token_type == T_REDIR_OUT)
		return (REDIR_OUT);
	else if (token_type == T_REDIR_APPEND)
		return (REDIR_APPEND);
	else if (token_type == T_REDIR_HEREDOC)
		return (REDIR_HEREDOC);
	return (REDIR_IN);
}

// Processa um token de redirecionamento
static int	handle_redirection(t_token **current, t_commands *cmd, t_garbage **gc)
{
	t_redir_type	redir_type;
	t_redir			*new_redir;
	t_token			*redir_token;
	t_token			*file_token;

	redir_token = *current;
	redir_type = get_redir_type(redir_token->type);

	// O próximo token deve ser o arquivo/delimitador
	file_token = redir_token->next;
	if (!file_token || file_token->type != T_WORD)
	{
		write(2, "minishell: syntax error near unexpected token\n", 47);
		return (1);
	}
	new_redir = create_redir_node(redir_type, file_token->value, gc);
	if (!new_redir)
		return (1);
	add_redir_to_command(cmd, new_redir);
	// Avança para o próximo token após o arquivo
	*current = file_token->next;
	return (0);
}

// Processa tokens para um único comando
static t_commands	*parse_single_command(t_token **tokens, t_garbage **gc)
{
	t_commands	*cmd;
	t_token		*current;

	cmd = create_command_node(gc);
	if (!cmd)
		return (NULL);

	current = *tokens;
	while (current && current->type != T_PIPE)
	{
		if (current->type == T_WORD)
		{
			if (add_arg_to_command(cmd, current->value, gc) != 0)
				return (NULL);
			current = current->next;
		}
		else if (current->type >= T_REDIR_IN && current->type <= T_REDIR_HEREDOC)
		{
			if (handle_redirection(&current, cmd, gc) != 0)
				return (NULL);
		}
		else
			current = current->next;
	}
	*tokens = current;
	return (cmd);
}

// Função principal para parsear tokens em uma lista de comandos
t_commands	*parse_tokens_to_commands(t_token *tokens, t_garbage **gc)
{
	t_commands	*cmd_list;
	t_commands	*new_cmd;
	t_token		*current;

	cmd_list = NULL;
	current = tokens;

	while (current)
	{
		new_cmd = parse_single_command(&current, gc);
		if (!new_cmd)
			return (NULL);
		add_command_to_list(&cmd_list, new_cmd);
		// Se encontrou um pipe, avança para o próximo comando
		if (current && current->type == T_PIPE)
			current = current->next;
	}
	return (cmd_list);
}

// Função auxiliar para debug - imprime a estrutura de comandos
void	print_command_structure(t_commands *cmd_list)
{
	t_commands	*cmd;
	t_redir		*redir;
	int			cmd_num;
	int			arg_num;

	cmd_num = 1;
	cmd = cmd_list;
	while (cmd)
	{
		printf("Command %d:\n", cmd_num);
		// Imprime argumentos
		if (cmd->argv)
		{
			printf("  Arguments:\n");
			arg_num = 0;
			while (cmd->argv[arg_num])
			{
				printf("    [%d] %s\n", arg_num, cmd->argv[arg_num]);
				arg_num++;
			}
		}
		// Imprime redirecionamentos
		if (cmd->redir)
		{
			printf("  Redirections:\n");
			redir = cmd->redir;
			while (redir)
			{
				printf("    Type: ");
				if (redir->type == REDIR_IN)
					printf("< (input)");
				else if (redir->type == REDIR_OUT)
					printf("> (output)");
				else if (redir->type == REDIR_APPEND)
					printf(">> (append)");
				else if (redir->type == REDIR_HEREDOC)
					printf("<< (heredoc)");
				printf(", File: %s\n", redir->file);
				redir = redir->next;
			}
		}
		cmd = cmd->next;
		cmd_num++;
		if (cmd)
			printf("  |\n");
	}
}
variable_expansion_utils.c
char	*process_dollar_sign(char *str, int *i, char *result, t_minishell *mini)
{
	char	*var_name;
	char	*var_value;

	(*i)++;
	var_name = extract_var_name(str, i, &mini->gc);
	if (var_name)
	{
		var_value = get_var_value(var_name, mini);
		result = join_strings(result, var_value, &mini->gc);
	}
	else
		result = join_strings(result, "$", &mini->gc);
	return (result);
}
variable_expanion.c
char	*extract_raw_content(char *input, int start, int len, t_garbage **gc)
{
	char	*content;
	int		i;
	int		j;

	content = gc_malloc(len + 1, gc);
	if (!content)
		return (NULL);
	i = start;
	j = 0;
	while (j < len)
	{
		if (input[i] == '\\' && input[i + 1] == '"')
		{
			content[j++] = '"';
			i += 2;
		}
		else
			content[j++] = input[i++];
	}
	content[j] = '\0';
	return (content);
}

static char	*create_empty_string(t_garbage **gc)
{
	char	*str;

	str = gc_malloc(1, gc);
	if (str)
		str[0] = '\0';
	return (str);
}

char	*get_var_value(char *var_name, t_minishell *mini)
{
	char	*value;
	char	*exit_str;

	if (!var_name)
		return (create_empty_string(&mini->gc));
	if (ft_strncmp(var_name, "?", 2) == 0)
	{
		exit_str = ft_itoa(mini->last_exit);
		if (!exit_str)
			return (create_empty_string(&mini->gc));
		value = gc_malloc(ft_strlen(exit_str) + 1, &mini->gc);
		if (!value)
		{
			free(exit_str);
			return (create_empty_string(&mini->gc));
		}
		ft_strlcpy(value, exit_str, ft_strlen(exit_str) + 1);
		free(exit_str);
		return (value);
	}
	value = get_env_value(mini->env, var_name);
	if (!value)
		return (create_empty_string(&mini->gc));
	return (value);
}

char	*extract_var_name(char *str, int *pos, t_garbage **gc)
{
	int		start;
	int		len;
	char	*var_name;

	start = *pos;
	if (str[*pos] == '?')
	{
		(*pos)++;
		var_name = gc_malloc(2, gc);
		if (!var_name)
			return (NULL);
		ft_strlcpy(var_name, "?", 2);
		return (var_name);
	}
	if (!(ft_isalpha(str[*pos]) || str[*pos] == '_'))
		return (NULL);
	while (str[*pos] && (ft_isalnum(str[*pos]) || str[*pos] == '_'))
		(*pos)++;
	len = *pos - start;
	var_name = gc_malloc(len + 1, gc);
	if (!var_name)
		return (NULL);
	ft_strlcpy(var_name, &str[start], len + 1);
	return (var_name);
}

char	*expand_variables(char *str, t_minishell *mini)
{
	char	*result;
	int		i;

	if (!str)
		return (NULL);
	result = gc_malloc(1, &mini->gc);
	if (!result)
		return (NULL);
	result[0] = '\0';
	i = 0;
	while (str[i])
	{
		if (str[i] == '$')
			result = process_dollar_sign(str, &i, result, mini);
		else
			result = append_char(result, str[i++], &mini->gc);
	}
	return (result);
}